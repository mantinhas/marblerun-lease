// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: proto/Voting.proto

package emojivoto_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VotingServiceClient is the client API for VotingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VotingServiceClient interface {
	VotePoop(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteJoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSunglasses(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRelaxed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteStuckOutTongueWinkingEye(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMoneyMouthFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFlushed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMask(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteNerdFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGhost(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSkullAndCrossbones(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteHeartEyesCat(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteHearNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSeeNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSpeakNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGirl(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteOlderMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePoliceman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGuardsman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteConstructionWorkerMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePrince(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePrincess(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteManInTuxedo(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBrideWithVeil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMrsClaus(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSanta(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTurkey(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRabbit(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteNoGoodWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteOkWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRaisingHandWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBowingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteManFacepalming(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWomanShrugging(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMassageWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWalkingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRunningMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDancer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteManDancing(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDancingWomen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRainbow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSkier(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteGolfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSurfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBasketballMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBikingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePointUp2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteVulcanSalute(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMetal(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCallMeHand(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteThumbsup(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWave(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteClap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRaisedHands(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePray(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDog(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCat2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePig(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteHatchingChick(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSnail(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBacon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePizza(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTaco(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBurrito(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRamen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteDoughnut(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteChampagne(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTropicalDrink(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBeer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTumblerGlass(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteWorldMap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBeachUmbrella(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMountainSnow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCamping(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSteamLocomotive(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFlightDeparture(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteRocket(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteStar2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteSunBehindSmallCloud(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCloudWithRain(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFire(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteJackOLantern(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBalloon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTada(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteTrophy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteIphone(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VotePager(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFax(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteBulb(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteMoneyWithWings(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCrystalBall(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteUnderage(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteInterrobang(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	Vote100(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCheckeredFlag(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteCrossedSwords(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	VoteFloppyDisk(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
	Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error)
}

type votingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingServiceClient(cc grpc.ClientConnInterface) VotingServiceClient {
	return &votingServiceClient{cc}
}

func (c *votingServiceClient) VotePoop(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePoop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteJoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteJoy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSunglasses(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSunglasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRelaxed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRelaxed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteStuckOutTongueWinkingEye(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteStuckOutTongueWinkingEye", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMoneyMouthFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMoneyMouthFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFlushed(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFlushed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMask(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteNerdFace(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteNerdFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGhost(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGhost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSkullAndCrossbones(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSkullAndCrossbones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteHeartEyesCat(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteHeartEyesCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteHearNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteHearNoEvil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSeeNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSeeNoEvil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSpeakNoEvil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSpeakNoEvil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBoy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBoy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGirl(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGirl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteOlderMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteOlderMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePoliceman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePoliceman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGuardsman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGuardsman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteConstructionWorkerMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteConstructionWorkerMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePrince(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePrince", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePrincess(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePrincess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteManInTuxedo(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteManInTuxedo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBrideWithVeil(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBrideWithVeil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMrsClaus(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMrsClaus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSanta(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSanta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTurkey(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTurkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRabbit(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRabbit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteNoGoodWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteNoGoodWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteOkWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteOkWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRaisingHandWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRaisingHandWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBowingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBowingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteManFacepalming(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteManFacepalming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWomanShrugging(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWomanShrugging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMassageWoman(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMassageWoman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWalkingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWalkingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRunningMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRunningMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDancer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteManDancing(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteManDancing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDancingWomen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDancingWomen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRainbow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRainbow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSkier(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSkier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteGolfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteGolfingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSurfingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSurfingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBasketballMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBasketballMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBikingMan(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBikingMan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePointUp2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePointUp2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteVulcanSalute(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteVulcanSalute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMetal(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMetal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCallMeHand(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCallMeHand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteThumbsup(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteThumbsup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWave(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteClap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteClap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRaisedHands(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRaisedHands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePray(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDog(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCat2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCat2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePig(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteHatchingChick(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteHatchingChick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSnail(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBacon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePizza(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePizza", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTaco(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTaco", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBurrito(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBurrito", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRamen(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRamen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteDoughnut(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteDoughnut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteChampagne(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteChampagne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTropicalDrink(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTropicalDrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBeer(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTumblerGlass(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTumblerGlass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteWorldMap(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteWorldMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBeachUmbrella(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBeachUmbrella", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMountainSnow(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMountainSnow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCamping(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCamping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSteamLocomotive(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSteamLocomotive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFlightDeparture(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFlightDeparture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteRocket(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteRocket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteStar2(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteStar2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteSunBehindSmallCloud(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteSunBehindSmallCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCloudWithRain(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCloudWithRain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFire(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteJackOLantern(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteJackOLantern", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBalloon(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBalloon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTada(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTada", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteTrophy(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteTrophy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteIphone(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteIphone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VotePager(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VotePager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFax(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteBulb(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteBulb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteMoneyWithWings(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteMoneyWithWings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCrystalBall(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCrystalBall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteUnderage(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteUnderage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteInterrobang(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteInterrobang", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) Vote100(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/Vote100", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCheckeredFlag(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCheckeredFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteCrossedSwords(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteCrossedSwords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) VoteFloppyDisk(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/VoteFloppyDisk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) Results(ctx context.Context, in *ResultsRequest, opts ...grpc.CallOption) (*ResultsResponse, error) {
	out := new(ResultsResponse)
	err := c.cc.Invoke(ctx, "/emojivoto.v1.VotingService/Results", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VotingServiceServer is the server API for VotingService service.
// All implementations must embed UnimplementedVotingServiceServer
// for forward compatibility
type VotingServiceServer interface {
	VotePoop(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteJoy(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSunglasses(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRelaxed(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteStuckOutTongueWinkingEye(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMoneyMouthFace(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFlushed(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMask(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteNerdFace(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGhost(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSkullAndCrossbones(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteHeartEyesCat(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteHearNoEvil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSeeNoEvil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSpeakNoEvil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBoy(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGirl(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteOlderMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePoliceman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGuardsman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteConstructionWorkerMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePrince(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePrincess(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteManInTuxedo(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBrideWithVeil(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMrsClaus(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSanta(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTurkey(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRabbit(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteNoGoodWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteOkWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRaisingHandWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBowingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteManFacepalming(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWomanShrugging(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMassageWoman(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWalkingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRunningMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDancer(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteManDancing(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDancingWomen(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRainbow(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSkier(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteGolfingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSurfingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBasketballMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBikingMan(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePointUp2(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteVulcanSalute(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMetal(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCallMeHand(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteThumbsup(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWave(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteClap(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRaisedHands(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePray(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDog(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCat2(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePig(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteHatchingChick(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSnail(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBacon(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePizza(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTaco(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBurrito(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRamen(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteDoughnut(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteChampagne(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTropicalDrink(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBeer(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTumblerGlass(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteWorldMap(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBeachUmbrella(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMountainSnow(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCamping(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSteamLocomotive(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFlightDeparture(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteRocket(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteStar2(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteSunBehindSmallCloud(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCloudWithRain(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFire(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteJackOLantern(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBalloon(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTada(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteTrophy(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteIphone(context.Context, *VoteRequest) (*VoteResponse, error)
	VotePager(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFax(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteBulb(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteMoneyWithWings(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCrystalBall(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteUnderage(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteInterrobang(context.Context, *VoteRequest) (*VoteResponse, error)
	Vote100(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCheckeredFlag(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteCrossedSwords(context.Context, *VoteRequest) (*VoteResponse, error)
	VoteFloppyDisk(context.Context, *VoteRequest) (*VoteResponse, error)
	Results(context.Context, *ResultsRequest) (*ResultsResponse, error)
	mustEmbedUnimplementedVotingServiceServer()
}

// UnimplementedVotingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVotingServiceServer struct {
}

func (UnimplementedVotingServiceServer) VotePoop(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePoop not implemented")
}
func (UnimplementedVotingServiceServer) VoteJoy(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteJoy not implemented")
}
func (UnimplementedVotingServiceServer) VoteSunglasses(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSunglasses not implemented")
}
func (UnimplementedVotingServiceServer) VoteRelaxed(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRelaxed not implemented")
}
func (UnimplementedVotingServiceServer) VoteStuckOutTongueWinkingEye(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteStuckOutTongueWinkingEye not implemented")
}
func (UnimplementedVotingServiceServer) VoteMoneyMouthFace(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMoneyMouthFace not implemented")
}
func (UnimplementedVotingServiceServer) VoteFlushed(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFlushed not implemented")
}
func (UnimplementedVotingServiceServer) VoteMask(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMask not implemented")
}
func (UnimplementedVotingServiceServer) VoteNerdFace(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteNerdFace not implemented")
}
func (UnimplementedVotingServiceServer) VoteGhost(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGhost not implemented")
}
func (UnimplementedVotingServiceServer) VoteSkullAndCrossbones(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSkullAndCrossbones not implemented")
}
func (UnimplementedVotingServiceServer) VoteHeartEyesCat(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteHeartEyesCat not implemented")
}
func (UnimplementedVotingServiceServer) VoteHearNoEvil(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteHearNoEvil not implemented")
}
func (UnimplementedVotingServiceServer) VoteSeeNoEvil(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSeeNoEvil not implemented")
}
func (UnimplementedVotingServiceServer) VoteSpeakNoEvil(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSpeakNoEvil not implemented")
}
func (UnimplementedVotingServiceServer) VoteBoy(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBoy not implemented")
}
func (UnimplementedVotingServiceServer) VoteGirl(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGirl not implemented")
}
func (UnimplementedVotingServiceServer) VoteMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMan not implemented")
}
func (UnimplementedVotingServiceServer) VoteWoman(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWoman not implemented")
}
func (UnimplementedVotingServiceServer) VoteOlderMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOlderMan not implemented")
}
func (UnimplementedVotingServiceServer) VotePoliceman(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePoliceman not implemented")
}
func (UnimplementedVotingServiceServer) VoteGuardsman(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGuardsman not implemented")
}
func (UnimplementedVotingServiceServer) VoteConstructionWorkerMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteConstructionWorkerMan not implemented")
}
func (UnimplementedVotingServiceServer) VotePrince(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePrince not implemented")
}
func (UnimplementedVotingServiceServer) VotePrincess(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePrincess not implemented")
}
func (UnimplementedVotingServiceServer) VoteManInTuxedo(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteManInTuxedo not implemented")
}
func (UnimplementedVotingServiceServer) VoteBrideWithVeil(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBrideWithVeil not implemented")
}
func (UnimplementedVotingServiceServer) VoteMrsClaus(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMrsClaus not implemented")
}
func (UnimplementedVotingServiceServer) VoteSanta(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSanta not implemented")
}
func (UnimplementedVotingServiceServer) VoteTurkey(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTurkey not implemented")
}
func (UnimplementedVotingServiceServer) VoteRabbit(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRabbit not implemented")
}
func (UnimplementedVotingServiceServer) VoteNoGoodWoman(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteNoGoodWoman not implemented")
}
func (UnimplementedVotingServiceServer) VoteOkWoman(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOkWoman not implemented")
}
func (UnimplementedVotingServiceServer) VoteRaisingHandWoman(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRaisingHandWoman not implemented")
}
func (UnimplementedVotingServiceServer) VoteBowingMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBowingMan not implemented")
}
func (UnimplementedVotingServiceServer) VoteManFacepalming(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteManFacepalming not implemented")
}
func (UnimplementedVotingServiceServer) VoteWomanShrugging(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWomanShrugging not implemented")
}
func (UnimplementedVotingServiceServer) VoteMassageWoman(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMassageWoman not implemented")
}
func (UnimplementedVotingServiceServer) VoteWalkingMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWalkingMan not implemented")
}
func (UnimplementedVotingServiceServer) VoteRunningMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRunningMan not implemented")
}
func (UnimplementedVotingServiceServer) VoteDancer(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDancer not implemented")
}
func (UnimplementedVotingServiceServer) VoteManDancing(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteManDancing not implemented")
}
func (UnimplementedVotingServiceServer) VoteDancingWomen(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDancingWomen not implemented")
}
func (UnimplementedVotingServiceServer) VoteRainbow(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRainbow not implemented")
}
func (UnimplementedVotingServiceServer) VoteSkier(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSkier not implemented")
}
func (UnimplementedVotingServiceServer) VoteGolfingMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteGolfingMan not implemented")
}
func (UnimplementedVotingServiceServer) VoteSurfingMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSurfingMan not implemented")
}
func (UnimplementedVotingServiceServer) VoteBasketballMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBasketballMan not implemented")
}
func (UnimplementedVotingServiceServer) VoteBikingMan(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBikingMan not implemented")
}
func (UnimplementedVotingServiceServer) VotePointUp2(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePointUp2 not implemented")
}
func (UnimplementedVotingServiceServer) VoteVulcanSalute(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteVulcanSalute not implemented")
}
func (UnimplementedVotingServiceServer) VoteMetal(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMetal not implemented")
}
func (UnimplementedVotingServiceServer) VoteCallMeHand(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCallMeHand not implemented")
}
func (UnimplementedVotingServiceServer) VoteThumbsup(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteThumbsup not implemented")
}
func (UnimplementedVotingServiceServer) VoteWave(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWave not implemented")
}
func (UnimplementedVotingServiceServer) VoteClap(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteClap not implemented")
}
func (UnimplementedVotingServiceServer) VoteRaisedHands(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRaisedHands not implemented")
}
func (UnimplementedVotingServiceServer) VotePray(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePray not implemented")
}
func (UnimplementedVotingServiceServer) VoteDog(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDog not implemented")
}
func (UnimplementedVotingServiceServer) VoteCat2(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCat2 not implemented")
}
func (UnimplementedVotingServiceServer) VotePig(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePig not implemented")
}
func (UnimplementedVotingServiceServer) VoteHatchingChick(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteHatchingChick not implemented")
}
func (UnimplementedVotingServiceServer) VoteSnail(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSnail not implemented")
}
func (UnimplementedVotingServiceServer) VoteBacon(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBacon not implemented")
}
func (UnimplementedVotingServiceServer) VotePizza(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePizza not implemented")
}
func (UnimplementedVotingServiceServer) VoteTaco(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTaco not implemented")
}
func (UnimplementedVotingServiceServer) VoteBurrito(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBurrito not implemented")
}
func (UnimplementedVotingServiceServer) VoteRamen(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRamen not implemented")
}
func (UnimplementedVotingServiceServer) VoteDoughnut(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDoughnut not implemented")
}
func (UnimplementedVotingServiceServer) VoteChampagne(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteChampagne not implemented")
}
func (UnimplementedVotingServiceServer) VoteTropicalDrink(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTropicalDrink not implemented")
}
func (UnimplementedVotingServiceServer) VoteBeer(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBeer not implemented")
}
func (UnimplementedVotingServiceServer) VoteTumblerGlass(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTumblerGlass not implemented")
}
func (UnimplementedVotingServiceServer) VoteWorldMap(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWorldMap not implemented")
}
func (UnimplementedVotingServiceServer) VoteBeachUmbrella(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBeachUmbrella not implemented")
}
func (UnimplementedVotingServiceServer) VoteMountainSnow(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMountainSnow not implemented")
}
func (UnimplementedVotingServiceServer) VoteCamping(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCamping not implemented")
}
func (UnimplementedVotingServiceServer) VoteSteamLocomotive(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSteamLocomotive not implemented")
}
func (UnimplementedVotingServiceServer) VoteFlightDeparture(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFlightDeparture not implemented")
}
func (UnimplementedVotingServiceServer) VoteRocket(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteRocket not implemented")
}
func (UnimplementedVotingServiceServer) VoteStar2(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteStar2 not implemented")
}
func (UnimplementedVotingServiceServer) VoteSunBehindSmallCloud(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteSunBehindSmallCloud not implemented")
}
func (UnimplementedVotingServiceServer) VoteCloudWithRain(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCloudWithRain not implemented")
}
func (UnimplementedVotingServiceServer) VoteFire(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFire not implemented")
}
func (UnimplementedVotingServiceServer) VoteJackOLantern(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteJackOLantern not implemented")
}
func (UnimplementedVotingServiceServer) VoteBalloon(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBalloon not implemented")
}
func (UnimplementedVotingServiceServer) VoteTada(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTada not implemented")
}
func (UnimplementedVotingServiceServer) VoteTrophy(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteTrophy not implemented")
}
func (UnimplementedVotingServiceServer) VoteIphone(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteIphone not implemented")
}
func (UnimplementedVotingServiceServer) VotePager(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VotePager not implemented")
}
func (UnimplementedVotingServiceServer) VoteFax(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFax not implemented")
}
func (UnimplementedVotingServiceServer) VoteBulb(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteBulb not implemented")
}
func (UnimplementedVotingServiceServer) VoteMoneyWithWings(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteMoneyWithWings not implemented")
}
func (UnimplementedVotingServiceServer) VoteCrystalBall(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCrystalBall not implemented")
}
func (UnimplementedVotingServiceServer) VoteUnderage(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteUnderage not implemented")
}
func (UnimplementedVotingServiceServer) VoteInterrobang(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteInterrobang not implemented")
}
func (UnimplementedVotingServiceServer) Vote100(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote100 not implemented")
}
func (UnimplementedVotingServiceServer) VoteCheckeredFlag(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCheckeredFlag not implemented")
}
func (UnimplementedVotingServiceServer) VoteCrossedSwords(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteCrossedSwords not implemented")
}
func (UnimplementedVotingServiceServer) VoteFloppyDisk(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteFloppyDisk not implemented")
}
func (UnimplementedVotingServiceServer) Results(context.Context, *ResultsRequest) (*ResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Results not implemented")
}
func (UnimplementedVotingServiceServer) mustEmbedUnimplementedVotingServiceServer() {}

// UnsafeVotingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VotingServiceServer will
// result in compilation errors.
type UnsafeVotingServiceServer interface {
	mustEmbedUnimplementedVotingServiceServer()
}

func RegisterVotingServiceServer(s grpc.ServiceRegistrar, srv VotingServiceServer) {
	s.RegisterService(&VotingService_ServiceDesc, srv)
}

func _VotingService_VotePoop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePoop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePoop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePoop(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteJoy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteJoy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteJoy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteJoy(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSunglasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSunglasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSunglasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSunglasses(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRelaxed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRelaxed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRelaxed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRelaxed(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteStuckOutTongueWinkingEye_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteStuckOutTongueWinkingEye(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteStuckOutTongueWinkingEye",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteStuckOutTongueWinkingEye(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMoneyMouthFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMoneyMouthFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMoneyMouthFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMoneyMouthFace(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFlushed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFlushed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFlushed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFlushed(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMask(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteNerdFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteNerdFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteNerdFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteNerdFace(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGhost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGhost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGhost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGhost(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSkullAndCrossbones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSkullAndCrossbones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSkullAndCrossbones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSkullAndCrossbones(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteHeartEyesCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteHeartEyesCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteHeartEyesCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteHeartEyesCat(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteHearNoEvil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteHearNoEvil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteHearNoEvil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteHearNoEvil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSeeNoEvil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSeeNoEvil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSeeNoEvil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSeeNoEvil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSpeakNoEvil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSpeakNoEvil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSpeakNoEvil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSpeakNoEvil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBoy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBoy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBoy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBoy(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGirl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGirl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGirl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGirl(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteOlderMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteOlderMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteOlderMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteOlderMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePoliceman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePoliceman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePoliceman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePoliceman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGuardsman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGuardsman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGuardsman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGuardsman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteConstructionWorkerMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteConstructionWorkerMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteConstructionWorkerMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteConstructionWorkerMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePrince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePrince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePrince",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePrince(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePrincess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePrincess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePrincess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePrincess(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteManInTuxedo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteManInTuxedo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteManInTuxedo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteManInTuxedo(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBrideWithVeil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBrideWithVeil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBrideWithVeil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBrideWithVeil(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMrsClaus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMrsClaus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMrsClaus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMrsClaus(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSanta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSanta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSanta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSanta(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTurkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTurkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTurkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTurkey(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRabbit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRabbit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRabbit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRabbit(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteNoGoodWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteNoGoodWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteNoGoodWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteNoGoodWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteOkWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteOkWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteOkWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteOkWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRaisingHandWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRaisingHandWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRaisingHandWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRaisingHandWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBowingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBowingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBowingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBowingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteManFacepalming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteManFacepalming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteManFacepalming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteManFacepalming(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWomanShrugging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWomanShrugging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWomanShrugging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWomanShrugging(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMassageWoman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMassageWoman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMassageWoman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMassageWoman(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWalkingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWalkingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWalkingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWalkingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRunningMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRunningMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRunningMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRunningMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDancer(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteManDancing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteManDancing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteManDancing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteManDancing(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDancingWomen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDancingWomen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDancingWomen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDancingWomen(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRainbow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRainbow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRainbow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRainbow(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSkier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSkier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSkier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSkier(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteGolfingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteGolfingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteGolfingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteGolfingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSurfingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSurfingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSurfingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSurfingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBasketballMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBasketballMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBasketballMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBasketballMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBikingMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBikingMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBikingMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBikingMan(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePointUp2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePointUp2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePointUp2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePointUp2(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteVulcanSalute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteVulcanSalute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteVulcanSalute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteVulcanSalute(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMetal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMetal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMetal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMetal(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCallMeHand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCallMeHand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCallMeHand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCallMeHand(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteThumbsup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteThumbsup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteThumbsup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteThumbsup(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWave(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteClap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteClap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteClap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteClap(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRaisedHands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRaisedHands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRaisedHands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRaisedHands(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePray(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDog(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCat2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCat2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCat2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCat2(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePig(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteHatchingChick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteHatchingChick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteHatchingChick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteHatchingChick(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSnail(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBacon(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePizza_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePizza(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePizza",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePizza(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTaco_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTaco(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTaco",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTaco(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBurrito_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBurrito(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBurrito",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBurrito(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRamen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRamen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRamen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRamen(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteDoughnut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteDoughnut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteDoughnut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteDoughnut(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteChampagne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteChampagne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteChampagne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteChampagne(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTropicalDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTropicalDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTropicalDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTropicalDrink(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBeer(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTumblerGlass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTumblerGlass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTumblerGlass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTumblerGlass(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteWorldMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteWorldMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteWorldMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteWorldMap(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBeachUmbrella_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBeachUmbrella(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBeachUmbrella",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBeachUmbrella(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMountainSnow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMountainSnow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMountainSnow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMountainSnow(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCamping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCamping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCamping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCamping(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSteamLocomotive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSteamLocomotive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSteamLocomotive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSteamLocomotive(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFlightDeparture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFlightDeparture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFlightDeparture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFlightDeparture(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteRocket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteRocket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteRocket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteRocket(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteStar2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteStar2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteStar2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteStar2(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteSunBehindSmallCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteSunBehindSmallCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteSunBehindSmallCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteSunBehindSmallCloud(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCloudWithRain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCloudWithRain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCloudWithRain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCloudWithRain(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFire(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteJackOLantern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteJackOLantern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteJackOLantern",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteJackOLantern(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBalloon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBalloon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBalloon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBalloon(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTada",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTada(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteTrophy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteTrophy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteTrophy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteTrophy(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteIphone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteIphone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteIphone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteIphone(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VotePager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VotePager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VotePager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VotePager(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFax(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteBulb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteBulb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteBulb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteBulb(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteMoneyWithWings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteMoneyWithWings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteMoneyWithWings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteMoneyWithWings(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCrystalBall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCrystalBall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCrystalBall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCrystalBall(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteUnderage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteUnderage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteUnderage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteUnderage(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteInterrobang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteInterrobang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteInterrobang",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteInterrobang(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_Vote100_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).Vote100(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/Vote100",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).Vote100(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCheckeredFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCheckeredFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCheckeredFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCheckeredFlag(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteCrossedSwords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteCrossedSwords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteCrossedSwords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteCrossedSwords(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_VoteFloppyDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteFloppyDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/VoteFloppyDisk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteFloppyDisk(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_Results_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).Results(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emojivoto.v1.VotingService/Results",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).Results(ctx, req.(*ResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VotingService_ServiceDesc is the grpc.ServiceDesc for VotingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VotingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emojivoto.v1.VotingService",
	HandlerType: (*VotingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VotePoop",
			Handler:    _VotingService_VotePoop_Handler,
		},
		{
			MethodName: "VoteJoy",
			Handler:    _VotingService_VoteJoy_Handler,
		},
		{
			MethodName: "VoteSunglasses",
			Handler:    _VotingService_VoteSunglasses_Handler,
		},
		{
			MethodName: "VoteRelaxed",
			Handler:    _VotingService_VoteRelaxed_Handler,
		},
		{
			MethodName: "VoteStuckOutTongueWinkingEye",
			Handler:    _VotingService_VoteStuckOutTongueWinkingEye_Handler,
		},
		{
			MethodName: "VoteMoneyMouthFace",
			Handler:    _VotingService_VoteMoneyMouthFace_Handler,
		},
		{
			MethodName: "VoteFlushed",
			Handler:    _VotingService_VoteFlushed_Handler,
		},
		{
			MethodName: "VoteMask",
			Handler:    _VotingService_VoteMask_Handler,
		},
		{
			MethodName: "VoteNerdFace",
			Handler:    _VotingService_VoteNerdFace_Handler,
		},
		{
			MethodName: "VoteGhost",
			Handler:    _VotingService_VoteGhost_Handler,
		},
		{
			MethodName: "VoteSkullAndCrossbones",
			Handler:    _VotingService_VoteSkullAndCrossbones_Handler,
		},
		{
			MethodName: "VoteHeartEyesCat",
			Handler:    _VotingService_VoteHeartEyesCat_Handler,
		},
		{
			MethodName: "VoteHearNoEvil",
			Handler:    _VotingService_VoteHearNoEvil_Handler,
		},
		{
			MethodName: "VoteSeeNoEvil",
			Handler:    _VotingService_VoteSeeNoEvil_Handler,
		},
		{
			MethodName: "VoteSpeakNoEvil",
			Handler:    _VotingService_VoteSpeakNoEvil_Handler,
		},
		{
			MethodName: "VoteBoy",
			Handler:    _VotingService_VoteBoy_Handler,
		},
		{
			MethodName: "VoteGirl",
			Handler:    _VotingService_VoteGirl_Handler,
		},
		{
			MethodName: "VoteMan",
			Handler:    _VotingService_VoteMan_Handler,
		},
		{
			MethodName: "VoteWoman",
			Handler:    _VotingService_VoteWoman_Handler,
		},
		{
			MethodName: "VoteOlderMan",
			Handler:    _VotingService_VoteOlderMan_Handler,
		},
		{
			MethodName: "VotePoliceman",
			Handler:    _VotingService_VotePoliceman_Handler,
		},
		{
			MethodName: "VoteGuardsman",
			Handler:    _VotingService_VoteGuardsman_Handler,
		},
		{
			MethodName: "VoteConstructionWorkerMan",
			Handler:    _VotingService_VoteConstructionWorkerMan_Handler,
		},
		{
			MethodName: "VotePrince",
			Handler:    _VotingService_VotePrince_Handler,
		},
		{
			MethodName: "VotePrincess",
			Handler:    _VotingService_VotePrincess_Handler,
		},
		{
			MethodName: "VoteManInTuxedo",
			Handler:    _VotingService_VoteManInTuxedo_Handler,
		},
		{
			MethodName: "VoteBrideWithVeil",
			Handler:    _VotingService_VoteBrideWithVeil_Handler,
		},
		{
			MethodName: "VoteMrsClaus",
			Handler:    _VotingService_VoteMrsClaus_Handler,
		},
		{
			MethodName: "VoteSanta",
			Handler:    _VotingService_VoteSanta_Handler,
		},
		{
			MethodName: "VoteTurkey",
			Handler:    _VotingService_VoteTurkey_Handler,
		},
		{
			MethodName: "VoteRabbit",
			Handler:    _VotingService_VoteRabbit_Handler,
		},
		{
			MethodName: "VoteNoGoodWoman",
			Handler:    _VotingService_VoteNoGoodWoman_Handler,
		},
		{
			MethodName: "VoteOkWoman",
			Handler:    _VotingService_VoteOkWoman_Handler,
		},
		{
			MethodName: "VoteRaisingHandWoman",
			Handler:    _VotingService_VoteRaisingHandWoman_Handler,
		},
		{
			MethodName: "VoteBowingMan",
			Handler:    _VotingService_VoteBowingMan_Handler,
		},
		{
			MethodName: "VoteManFacepalming",
			Handler:    _VotingService_VoteManFacepalming_Handler,
		},
		{
			MethodName: "VoteWomanShrugging",
			Handler:    _VotingService_VoteWomanShrugging_Handler,
		},
		{
			MethodName: "VoteMassageWoman",
			Handler:    _VotingService_VoteMassageWoman_Handler,
		},
		{
			MethodName: "VoteWalkingMan",
			Handler:    _VotingService_VoteWalkingMan_Handler,
		},
		{
			MethodName: "VoteRunningMan",
			Handler:    _VotingService_VoteRunningMan_Handler,
		},
		{
			MethodName: "VoteDancer",
			Handler:    _VotingService_VoteDancer_Handler,
		},
		{
			MethodName: "VoteManDancing",
			Handler:    _VotingService_VoteManDancing_Handler,
		},
		{
			MethodName: "VoteDancingWomen",
			Handler:    _VotingService_VoteDancingWomen_Handler,
		},
		{
			MethodName: "VoteRainbow",
			Handler:    _VotingService_VoteRainbow_Handler,
		},
		{
			MethodName: "VoteSkier",
			Handler:    _VotingService_VoteSkier_Handler,
		},
		{
			MethodName: "VoteGolfingMan",
			Handler:    _VotingService_VoteGolfingMan_Handler,
		},
		{
			MethodName: "VoteSurfingMan",
			Handler:    _VotingService_VoteSurfingMan_Handler,
		},
		{
			MethodName: "VoteBasketballMan",
			Handler:    _VotingService_VoteBasketballMan_Handler,
		},
		{
			MethodName: "VoteBikingMan",
			Handler:    _VotingService_VoteBikingMan_Handler,
		},
		{
			MethodName: "VotePointUp2",
			Handler:    _VotingService_VotePointUp2_Handler,
		},
		{
			MethodName: "VoteVulcanSalute",
			Handler:    _VotingService_VoteVulcanSalute_Handler,
		},
		{
			MethodName: "VoteMetal",
			Handler:    _VotingService_VoteMetal_Handler,
		},
		{
			MethodName: "VoteCallMeHand",
			Handler:    _VotingService_VoteCallMeHand_Handler,
		},
		{
			MethodName: "VoteThumbsup",
			Handler:    _VotingService_VoteThumbsup_Handler,
		},
		{
			MethodName: "VoteWave",
			Handler:    _VotingService_VoteWave_Handler,
		},
		{
			MethodName: "VoteClap",
			Handler:    _VotingService_VoteClap_Handler,
		},
		{
			MethodName: "VoteRaisedHands",
			Handler:    _VotingService_VoteRaisedHands_Handler,
		},
		{
			MethodName: "VotePray",
			Handler:    _VotingService_VotePray_Handler,
		},
		{
			MethodName: "VoteDog",
			Handler:    _VotingService_VoteDog_Handler,
		},
		{
			MethodName: "VoteCat2",
			Handler:    _VotingService_VoteCat2_Handler,
		},
		{
			MethodName: "VotePig",
			Handler:    _VotingService_VotePig_Handler,
		},
		{
			MethodName: "VoteHatchingChick",
			Handler:    _VotingService_VoteHatchingChick_Handler,
		},
		{
			MethodName: "VoteSnail",
			Handler:    _VotingService_VoteSnail_Handler,
		},
		{
			MethodName: "VoteBacon",
			Handler:    _VotingService_VoteBacon_Handler,
		},
		{
			MethodName: "VotePizza",
			Handler:    _VotingService_VotePizza_Handler,
		},
		{
			MethodName: "VoteTaco",
			Handler:    _VotingService_VoteTaco_Handler,
		},
		{
			MethodName: "VoteBurrito",
			Handler:    _VotingService_VoteBurrito_Handler,
		},
		{
			MethodName: "VoteRamen",
			Handler:    _VotingService_VoteRamen_Handler,
		},
		{
			MethodName: "VoteDoughnut",
			Handler:    _VotingService_VoteDoughnut_Handler,
		},
		{
			MethodName: "VoteChampagne",
			Handler:    _VotingService_VoteChampagne_Handler,
		},
		{
			MethodName: "VoteTropicalDrink",
			Handler:    _VotingService_VoteTropicalDrink_Handler,
		},
		{
			MethodName: "VoteBeer",
			Handler:    _VotingService_VoteBeer_Handler,
		},
		{
			MethodName: "VoteTumblerGlass",
			Handler:    _VotingService_VoteTumblerGlass_Handler,
		},
		{
			MethodName: "VoteWorldMap",
			Handler:    _VotingService_VoteWorldMap_Handler,
		},
		{
			MethodName: "VoteBeachUmbrella",
			Handler:    _VotingService_VoteBeachUmbrella_Handler,
		},
		{
			MethodName: "VoteMountainSnow",
			Handler:    _VotingService_VoteMountainSnow_Handler,
		},
		{
			MethodName: "VoteCamping",
			Handler:    _VotingService_VoteCamping_Handler,
		},
		{
			MethodName: "VoteSteamLocomotive",
			Handler:    _VotingService_VoteSteamLocomotive_Handler,
		},
		{
			MethodName: "VoteFlightDeparture",
			Handler:    _VotingService_VoteFlightDeparture_Handler,
		},
		{
			MethodName: "VoteRocket",
			Handler:    _VotingService_VoteRocket_Handler,
		},
		{
			MethodName: "VoteStar2",
			Handler:    _VotingService_VoteStar2_Handler,
		},
		{
			MethodName: "VoteSunBehindSmallCloud",
			Handler:    _VotingService_VoteSunBehindSmallCloud_Handler,
		},
		{
			MethodName: "VoteCloudWithRain",
			Handler:    _VotingService_VoteCloudWithRain_Handler,
		},
		{
			MethodName: "VoteFire",
			Handler:    _VotingService_VoteFire_Handler,
		},
		{
			MethodName: "VoteJackOLantern",
			Handler:    _VotingService_VoteJackOLantern_Handler,
		},
		{
			MethodName: "VoteBalloon",
			Handler:    _VotingService_VoteBalloon_Handler,
		},
		{
			MethodName: "VoteTada",
			Handler:    _VotingService_VoteTada_Handler,
		},
		{
			MethodName: "VoteTrophy",
			Handler:    _VotingService_VoteTrophy_Handler,
		},
		{
			MethodName: "VoteIphone",
			Handler:    _VotingService_VoteIphone_Handler,
		},
		{
			MethodName: "VotePager",
			Handler:    _VotingService_VotePager_Handler,
		},
		{
			MethodName: "VoteFax",
			Handler:    _VotingService_VoteFax_Handler,
		},
		{
			MethodName: "VoteBulb",
			Handler:    _VotingService_VoteBulb_Handler,
		},
		{
			MethodName: "VoteMoneyWithWings",
			Handler:    _VotingService_VoteMoneyWithWings_Handler,
		},
		{
			MethodName: "VoteCrystalBall",
			Handler:    _VotingService_VoteCrystalBall_Handler,
		},
		{
			MethodName: "VoteUnderage",
			Handler:    _VotingService_VoteUnderage_Handler,
		},
		{
			MethodName: "VoteInterrobang",
			Handler:    _VotingService_VoteInterrobang_Handler,
		},
		{
			MethodName: "Vote100",
			Handler:    _VotingService_Vote100_Handler,
		},
		{
			MethodName: "VoteCheckeredFlag",
			Handler:    _VotingService_VoteCheckeredFlag_Handler,
		},
		{
			MethodName: "VoteCrossedSwords",
			Handler:    _VotingService_VoteCrossedSwords_Handler,
		},
		{
			MethodName: "VoteFloppyDisk",
			Handler:    _VotingService_VoteFloppyDisk_Handler,
		},
		{
			MethodName: "Results",
			Handler:    _VotingService_Results_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Voting.proto",
}
