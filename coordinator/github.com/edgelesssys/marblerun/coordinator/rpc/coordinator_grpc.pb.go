// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarbleClient is the client API for Marble service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarbleClient interface {
	// Activate activates a marble in the mesh.
	Activate(ctx context.Context, in *ActivationReq, opts ...grpc.CallOption) (*ActivationResp, error)
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	Deactivate(ctx context.Context, in *DeactivateReq, opts ...grpc.CallOption) (*DeactivateResp, error)
}

type marbleClient struct {
	cc grpc.ClientConnInterface
}

func NewMarbleClient(cc grpc.ClientConnInterface) MarbleClient {
	return &marbleClient{cc}
}

func (c *marbleClient) Activate(ctx context.Context, in *ActivationReq, opts ...grpc.CallOption) (*ActivationResp, error) {
	out := new(ActivationResp)
	err := c.cc.Invoke(ctx, "/rpc.Marble/Activate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marbleClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := c.cc.Invoke(ctx, "/rpc.Marble/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marbleClient) Deactivate(ctx context.Context, in *DeactivateReq, opts ...grpc.CallOption) (*DeactivateResp, error) {
	out := new(DeactivateResp)
	err := c.cc.Invoke(ctx, "/rpc.Marble/Deactivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarbleServer is the server API for Marble service.
// All implementations must embed UnimplementedMarbleServer
// for forward compatibility
type MarbleServer interface {
	// Activate activates a marble in the mesh.
	Activate(context.Context, *ActivationReq) (*ActivationResp, error)
	Ping(context.Context, *PingReq) (*PingResp, error)
	Deactivate(context.Context, *DeactivateReq) (*DeactivateResp, error)
	mustEmbedUnimplementedMarbleServer()
}

// UnimplementedMarbleServer must be embedded to have forward compatible implementations.
type UnimplementedMarbleServer struct {
}

func (UnimplementedMarbleServer) Activate(context.Context, *ActivationReq) (*ActivationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedMarbleServer) Ping(context.Context, *PingReq) (*PingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMarbleServer) Deactivate(context.Context, *DeactivateReq) (*DeactivateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}
func (UnimplementedMarbleServer) mustEmbedUnimplementedMarbleServer() {}

// UnsafeMarbleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarbleServer will
// result in compilation errors.
type UnsafeMarbleServer interface {
	mustEmbedUnimplementedMarbleServer()
}

func RegisterMarbleServer(s grpc.ServiceRegistrar, srv MarbleServer) {
	s.RegisterService(&Marble_ServiceDesc, srv)
}

func _Marble_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarbleServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Marble/Activate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarbleServer).Activate(ctx, req.(*ActivationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marble_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarbleServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Marble/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarbleServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marble_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarbleServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Marble/Deactivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarbleServer).Deactivate(ctx, req.(*DeactivateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Marble_ServiceDesc is the grpc.ServiceDesc for Marble service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Marble_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Marble",
	HandlerType: (*MarbleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Activate",
			Handler:    _Marble_Activate_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Marble_Ping_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _Marble_Deactivate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator.proto",
}
